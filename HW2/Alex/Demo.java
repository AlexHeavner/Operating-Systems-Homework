/*
This assignment must be worked on the Linux platform.  Submit your source code via GeorgiaView in the main body and in an attachment, hw2_UourLastName.cpp, by the due day. You assignment is to write a C/C++ or Java program, which expands the assignment #1. The added functions of the program must include:
Assign each process an unique process ID, and a random number generated by the generator serves not only as the priority but also as the total time (in milliseconds) that is needed to run the process (CPU burst). Also, change the range of random numbers to [1-50].
Create a waiting queue that based on the first come first serve policy. The capacity of the queue is 7. The output of the priority queue (long term-queue) becomes the input of the waiting queue.
Create a ready queue that can handle 5 processes at a time in the Round Robin fashion. Each process is assigned two millisecond time slice to run on CPU. When a process has used up its time slice one time and still needs more time to run will be put back to the ready queue, otherwise the process will be terminated and moved out of the system.
Print out all the process IDs in the priority queue when a new process is entered the queue.
Print out all the process IDs in the waiting queue when a new process entered or a process moved out of the queue.
Print out all the process IDs and their time left to be executed when a process is entering or leaving (put back to the waiting queue or exit) the ready queue.
The relationships among the priority queue, the waiting queue, and the ready queue are shown below:
You should let your program first generates 10 processes with 10 random numbers along with 10 different process IDs, and put these processes in the priority queue. Note that the capacity of the priority queue is 10. When the priority queue is full, the system starts to move process to the waiting queue until there are 7 processes in the waiting queue, then the system starts to move processes into the ready queue, while the random number generator continues generating numbers for the new processes, your program at the same time is assigning process ID to the new processes. The program will stop generate process when the total number of processes entered the system is 25. You may dump the output to a file so that it will be easier to examine the output.
Your program will stop when all the processes are finished. Submit your source code via WebCT Vista in the main body and in an attachment, hw2_UourLastName.cpp, by the due day.
The output should look somewhat like:
Step 0:
The new generated process is P10 with priority 5
The processes in the priority queue are: P5:1 P3:3 P2:2 P1:4 P7:5 P4:4 P8:7 P9:6 P10:5 P6:7
The processes in the waiting queue are:
The processes in the ready queue is
Step 1:
The new generated process is P11 with priority 8
The processes in the priority queue are: P2:2 P3:3 P4:4 P1:4 P7:5 P6:7 P8:7 P9:6 P10:5 P11:8
The processes in the waiting queue are: P5:1
The processes in the ready queue is
Step 2:
The new generated process is P12 with priority 7
The processes in the priority queue are: P3:3 P1:4 P4:4 P10:5 P7:5 P6:7 P8:7 P9:6 P11:8 P12:7
The processes in the waiting queue are: P5:1 P2:2
The processes in the ready queue is
Step 3:
The new generated process is P13 with priority 2
The processes in the priority queue are: P13:2 P1:4 P4:4 P9:6 P10:5 P6:7 P8:7 P12:7 P11:8 P7:5
The processes in the waiting queue are: P5:1 P2:2 P3:3
The processes in the ready queue is
………………..
………………..

Authors:
Alexander Heavner
Matt Gaines
Brent Zucker
Tomas Reuning
*/
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Random;


public class Demo {
	public static void main(String[] args) throws IOException
	{
		//Define Constants
		final int TIME_SLICE = 2;
		final int READY_MAX = 5;
		final int WAITING_MAX = 7;
		final int PRIORITY_MAX = 10;
		
		//create IO object
		PrintWriter writer = new PrintWriter("output.txt", "UTF-8");
		
		//Creates processor object 
		Processor processor = new Processor(TIME_SLICE);
		
		//Creates random object to be used in process creation
		Random rand = new Random();
		
		//Create ready and waiting queues
		Queue<Process> ready = new LinkedList<Process>();
		Queue<Process> waiting = new LinkedList<Process>();
		
		//Create comparator for priority queue and the priority queue
		Comparator<Process> compare = new ProcessCompare();
		PriorityQueue<Process> priority = new PriorityQueue<Process>(PRIORITY_MAX, compare);
		
		//create list to hold finished processes
		LinkedList <Process> finished = new LinkedList<Process>();
		
		//Load Priority Queue
		for(int i = 0 ; i <= 10; i++)
		{
			priority.add(new Process(rand.nextInt(50) + 1));
		}
		
		//Start main running loop
		int step = 0;
		for(int process_count = 0; process_count < 25;)
		{
			//Write out step
			writer.println("Step " + step + ":");
			step++;
			//Move processes from queue to queu
			if(priority.size() < PRIORITY_MAX)
			{	
				Process priority_helper = new Process(rand.nextInt(50) + 1);
				priority.add(priority_helper);
				process_count++;
				writer.println("The new generated process is P"+priority_helper.getID()+" with priority "+priority_helper.getTimeToRun());
			}
			
			else if(waiting.size() < WAITING_MAX && priority.size() > 0)
			{
				waiting.add(priority.poll());
			}
			
			else if(ready.size() < READY_MAX && waiting.size() > 0 && priority.size() == PRIORITY_MAX)
			{
				ready.add(waiting.poll());
			}
			
			//Run process if ready queue contains atleast one process
			if(ready.size() > 0)
			{
				Process helper = processor.run(ready.poll());
				
				if(helper.getTimeToRun() == 0)
				{
					finished.add(helper);
				}
				else
				{
					ready.add(helper);
				}
			}
			//Write contents of priority queue
			writer.print("The processes in the priority queue are: ");
			for(Process element: priority)
			{
				writer.print("P"+element.getID()+":"+element.getTimeToRun()+" ");
			}
			writer.println();
			
			//Write contents of waiting queue
			writer.print("The processes in the waiting queue are: ");
			for(Process element: waiting)
			{
				writer.print("P"+element.getID()+":"+element.getTimeToRun()+" ");
			}
			writer.println();
			
			//Write contents of ready queue
			writer.print("The processes in the ready queue are: ");
			for(Process element: ready)
			{
				writer.print("P"+element.getID()+":"+element.getTimeToRun()+" ");
			}
			writer.println("\n");
			
		}
		
		writer.close();
		System.out.println("Done.");
	}
}
